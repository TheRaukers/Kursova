import sys
import threading
import logging
from urllib.parse import quote_plus

from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QComboBox,
    QPushButton, QTableWidget, QTableWidgetItem, QLabel
)
from PySide6.QtCore import Qt, QEvent, QObject

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from PySide6.QtCore import QTimer
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('abit_poisk.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

DIRECTION_IDS = {
    "–ö–ù": {
        "2024": "1331272",
        "2023": "1190568",
        "2022": "998668",
        "2021": "868050",
        "2020": "740810"
    },
    "–Ü–ü–ó": {
        "2024": "1353618",
        "2023": "1219021",
        "2022": "1004297",
        "2021": "881151",
        "2020": "761189"
    },
    "–Ü–°–¢": {
        "2024": "1329705",
        "2023": "1190371",
        "2022": "998345",
        "2021": "867502",
        "2020": "740146"
    }
}

class AbitPoiskApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AbitPoisk –†–µ–π—Ç–∏–Ω–≥–æ–≤–∏–π –°–ø–∏—Å–æ–∫")
        self.resize(1000, 600)

        layout = QVBoxLayout(self)

        self.spec_combo = QComboBox()
        self.spec_combo.addItem("–û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å")
        self.spec_combo.addItems(DIRECTION_IDS.keys())
        layout.addWidget(self.spec_combo)

        self.year_combo = QComboBox()
        self.year_combo.addItem("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫")
        self.year_combo.addItems([str(y) for y in range(2020, 2025)])
        layout.addWidget(self.year_combo)

        self.load_btn = QPushButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥")
        self.load_btn.setEnabled(False)
        layout.addWidget(self.load_btn)

        self.status_label = QLabel("–û–±–µ—Ä—ñ—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —Ä—ñ–∫")
        layout.addWidget(self.status_label)

        self.table = QTableWidget(0, 7)
        self.table.setHorizontalHeaderLabels(["‚Ññ", "–ü–Ü–ë", "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç", "–ë–∞–ª–∏", "–°—Ç–∞—Ç—É—Å", "–ö–≤–æ—Ç–∞", "–ü–í–ú/–í–ó"])
        self.table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.table)

        self.spec_combo.currentIndexChanged.connect(self.check_ready)
        self.year_combo.currentIndexChanged.connect(self.check_ready)
        self.load_btn.clicked.connect(self.load_ratings)
        self.table.cellClicked.connect(self.on_table_click)

        self.current_spec = None
        self.current_year = None

    def check_ready(self):
        ready = self.spec_combo.currentIndex() > 0 and self.year_combo.currentIndex() > 0
        self.load_btn.setEnabled(ready)

    def load_ratings(self):
        self.load_btn.setEnabled(False)
        self.current_spec = self.spec_combo.currentText()
        self.current_year = self.year_combo.currentText()
        self.status_label.setText("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É...")
        self.table.setRowCount(0)
        logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è {self.current_spec} {self.current_year}")
        threading.Thread(target=self.fetch_ratings, daemon=True).start()

    def fetch_ratings(self):
        try:
            direction_id = DIRECTION_IDS.get(self.current_spec, {}).get(self.current_year)
            year = self.current_year
            url = f"https://abit-poisk.org.ua/rate{year}/direction/{direction_id}"
            logger.debug(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ URL: {url}")
            
            data = self.get_table_data(url)
            if data:
                logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤")
                self.update_table(data, is_personal=False)
                self.update_status(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤")
            else:
                logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
                self.update_status("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É fetch_ratings: {str(e)}", exc_info=True)
            self.update_status(f"‚ÄºÔ∏è –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            QTimer.singleShot(0, lambda: self.load_btn.setEnabled(True))


    def get_table_data(self, url, is_personal=False):
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--user-agent=Mozilla/5.0")

        driver = None
        try:
            driver = webdriver.Chrome(options=options)
            driver.get(url)

            table = WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table.table.table-bordered.table-hover"))
            )

            rows = table.find_elements(By.CSS_SELECTOR, "tbody tr")
            data = []
            for i, row in enumerate(rows):
                #if i >= 20:  # –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 20 –∑–∞–ø–∏—Å—ñ–≤
                #    break

                cells = row.find_elements(By.TAG_NAME, "td")
                if not cells:
                    continue

                print(f"–†—è–¥–æ–∫ {i}: {[cell.text for cell in cells]}")

                if not is_personal:
                    if len(cells) >= 7:
                        data.append({
                            "‚Ññ": cells[0].text,
                            "–ü–Ü–ë": cells[1].text,
                            "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç": cells[2].text,
                            "–ë–∞–ª–∏": cells[3].text,
                            "–°—Ç–∞—Ç—É—Å": cells[4].text,
                            "–ö–≤–æ—Ç–∞": cells[6].text,
                            "–ü–í–ú/–í–ó": "+" if cells[7].text.strip() == "done_all" else cells[7].text,
                        })
                else:
                    if len(cells) >= 14:
                        data.append({
                            "‚Ññ": cells[3].text,
                            "–ü–Ü–ë": cells[1].text,
                            "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç": cells[4].text,
                            "–ë–∞–ª–∏": cells[6].text,
                            "–°—Ç–∞—Ç—É—Å": cells[2].text,
                            "–ö–≤–æ—Ç–∞": cells[12].text,
                            "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å": cells[11].text,
                        })

            return data
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É get_table_data: {str(e)}", exc_info=True)
            if driver:
                logger.debug("HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏:\n" + driver.page_source[:3000])
            return None
        finally:
            if driver:
                driver.quit()

    def update_table(self, data, is_personal=False):
        headers = ["‚Ññ", "–ü–Ü–ë", "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç", "–ë–∞–ª–∏", "–°—Ç–∞—Ç—É—Å", "–ö–≤–æ—Ç–∞", "–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å" if is_personal else "–ü–í–ú/–í–ó"]
        self.table.setColumnCount(len(headers))
        self.table.setHorizontalHeaderLabels(headers)
        self.table.setRowCount(len(data))
        for i, item in enumerate(data):
            self.table.setItem(i, 0, QTableWidgetItem(item["‚Ññ"]))
            self.table.setItem(i, 1, QTableWidgetItem(item["–ü–Ü–ë"]))
            self.table.setItem(i, 2, QTableWidgetItem(item["–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"]))
            self.table.setItem(i, 3, QTableWidgetItem(item["–ë–∞–ª–∏"]))
            self.table.setItem(i, 4, QTableWidgetItem(item["–°—Ç–∞—Ç—É—Å"]))
            self.table.setItem(i, 5, QTableWidgetItem(item["–ö–≤–æ—Ç–∞"]))
            self.table.setItem(i, 6, QTableWidgetItem(item["–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å"] if is_personal else item["–ü–í–ú/–í–ó"]))
        logger.debug("–¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
    def update_status(self, text):
        QTimer.singleShot(0, lambda: self.status_label.setText(text))

    def on_table_click(self, row, column):
        pib_item = self.table.item(row, 1)
        if pib_item:
            query = f"{pib_item.text()} {self.current_year}"
            self.status_label.setText(f"–ü–æ—à—É–∫ –∑–∞: {query}")
            logger.info(f"–ü–æ—à—É–∫ –∑–∞ –ü–Ü–ë: {query}")
            threading.Thread(target=self.search_by_pib, args=(query,), daemon=True).start()

    def search_by_pib(self, query):
        try:
            encoded_query = quote_plus(query)
            url = f"https://abit-poisk.org.ua/#search-{encoded_query}"
            logger.debug(f"–ü–æ—à—É–∫–æ–≤–∏–π URL: {url}")
            self.update_status("üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ—à—É–∫...")


            data = self.get_table_data(url, is_personal=True)
            if data:
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}'")
                self.update_table(data, is_personal=True)
                self.update_status(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}'")
            else:
                self.update_status("üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É: {e}", exc_info=True)
            self.update_status("‚ÄºÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É")


class _FunctionEvent(QEvent):
    def __init__(self, func):
        super().__init__(QEvent.User)
        self.func = func

class _EventFilter(QObject):
    def eventFilter(self, obj, event):
        if isinstance(event, _FunctionEvent):
            event.func()
            return True
        return False

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.installEventFilter(_EventFilter())
    window = AbitPoiskApp()
    window.show()
    sys.exit(app.exec())
